//@version=4
study(title="DIY: BMSB, Risk, Corridor", shorttitle="DIY: BMSB(20MA/21EMA), Risk, Corridor", overlay=true)

// Amateur switch 8 week SMA
switch = input(title="On/Off 8 week SMA", type=input.bool, defval=true)
transp = 100
if (switch)
    transp := 0
    
// Amateur switch BMSB
switchBMSB = input(title="On/Off BMSB", type=input.bool, defval=true)
transpBMSB = 100
fillBMSB = 100
if (switchBMSB)
    transpBMSB := 0
    fillBMSB := 80
    
// Amateur switch On/Off Top/Bottem
switchTopBottem = input(title="On/Off Top/Bottem", type=input.bool, defval=true)
transpTopBottem = 100
if (switchTopBottem)
    transpTopBottem := 50
    
// Amateur switch SMA (50/100/200/300) week SMA
switch100200 = input(title="On/Off (50/100/200/300) week SMA", type=input.bool, defval=true)
transp100200 = 100
fill100200 = 100
if (switch100200)
    transp100200 := 0
    fill100200 := 80
    
// Amateur switch dailyLines (100/200)
switchDailyLines = input(title="On/Off Daily Lines (100/200)", type=input.bool, defval=false)
transpDailyLines = 100
fillDailyLines = 100
if (switchDailyLines)
    transpDailyLines := 0
    fillDailyLines := 80    
    
// Amateur switch show Ben's Risk
switchCowenCorridor = input(title="On/Off Cowen Corridor", type=input.bool, defval=true)
showCowenCorridor = 100
fillCowenCorridor = 100
if (switchCowenCorridor and timeframe.isweekly)
    showCowenCorridor := 0
    fillCowenCorridor := 90    

// Amateur switch EMA Ribbon
switchEMARibbon = input(title="On/Off EMA Ribbon", type=input.bool, defval=false)
transpEMARibbon = 100
if (switchEMARibbon)
    transpEMARibbon := 0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MA
ma1Enabled = input(title="MA 1", type=input.bool, defval=true, group="Moving Average", inline="MA1")
ma1Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA1")
ma1Length = input(title="", type=input.integer, defval=8, minval=1, group="Moving Average", inline="MA1")
ma1Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA11")
ma1Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA11")
ma1Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA11")

ma2Enabled = input(title="MA 2", type=input.bool, defval=true, group="Moving Average", inline="MA2")
ma2Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA2")
ma2Length = input(title="", type=input.integer, defval=20, minval=1, group="Moving Average", inline="MA2")
ma2Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA22")
ma2Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA22")
ma2Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA22")

ma3Enabled = input(title="MA 3", type=input.bool, defval=true, group="Moving Average", inline="MA3")
ma3Type = input("EMA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA3")
ma3Length = input(title="", type=input.integer, defval=21, minval=1, group="Moving Average", inline="MA3")
ma3Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA33")
ma3Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA33")
ma3Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA33")

ma4Enabled = input(title="MA 4", type=input.bool, defval=true, group="Moving Average", inline="MA4")
ma4Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA4")
ma4Length = input(title="", type=input.integer, defval=100, minval=1, group="Moving Average", inline="MA4")
ma4Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA44")
ma4Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA44")
ma4Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA44")

ma5Enabled = input(title="MA 5", type=input.bool, defval=true, group="Moving Average", inline="MA5")
ma5Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA5")
ma5Length = input(title="", type=input.integer, defval=200, minval=1, group="Moving Average", inline="MA5")
ma5Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA55")
ma5Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA55")
ma5Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA55")

ma(_type, _src, _len) =>
    if _type == "EMA"
        ema(_src, _len)
    else if _type == "MA"
        sma(_src, _len)

ma_prediction(_type, _src, _period, _offset) =>
    (ma(_type, _src, _period - _offset) * (_period - _offset) + _src * _offset) / _period

ma1 = security(syminfo.tickerid, "W", ma(ma1Type, ma1Source, ma1Length), barmerge.gaps_on, barmerge.lookahead_on)
ma2 = security(syminfo.tickerid, "W", ma(ma2Type, ma2Source, ma2Length), barmerge.gaps_on, barmerge.lookahead_on)
ma3 = security(syminfo.tickerid, "W", ma(ma3Type, ma3Source, ma3Length), barmerge.gaps_on, barmerge.lookahead_on)
ma4 = security(syminfo.tickerid, "W", ma(ma4Type, ma4Source, ma4Length), barmerge.gaps_on, barmerge.lookahead_on)
ma5 = security(syminfo.tickerid, "W", ma(ma5Type, ma5Source, ma5Length), barmerge.gaps_on, barmerge.lookahead_on)

plot(ma1Enabled ? ma1 : na, title="MA 1", color=color.new(color.orange, transp), linewidth=1)
p4 = plot(ma4Enabled ? ma4 : na, title="MA 4", color=color.new(color.blue, transp100200), linewidth=2)
p5 = plot(ma4Enabled ? ma5 : na, title="MA 5", color=color.new(color.yellow, transp100200), linewidth=2)
p1 = plot(ma2Enabled ? ma2 : na, title="MA 2", color=color.new(color.red, transpBMSB), linewidth=2)
p2 = plot(ma3Enabled ? ma3 : na, title="MA 3", color=color.new(color.green, transpBMSB), linewidth=2)
fill(p1, p2, color=color.rgb(255,255,0, fillBMSB))
//fill(p4, p5, color=color.rgb(255,255,0, fill100200))

var label maLabel8 = na
maLabel8 := label.new(x=bar_index, y=int(ma1), yloc=yloc.price, style=label.style_label_left, color=color.new(color.orange, 100), text=tostring(ma1, "$ # - 8d sma"), textcolor=color.new(color.orange, transp))
label.delete(maLabel8[1])

var label maLabel20 = na
maLabel20 := label.new(x=bar_index, y=int(ma2), yloc=yloc.price, style=label.style_label_left, color=color.new(color.red, 100), text=tostring(ma2, "$ # - 2Od sma"), textcolor=color.new(color.red, transpBMSB))
label.delete(maLabel20[1])

var label maLabel21 = na
maLabel21 := label.new(x=bar_index, y=int(ma3), yloc=yloc.price, style=label.style_label_left, color=color.new(color.green, 100), text=tostring(ma3, "$ # - 21d ema"), textcolor=color.new(color.green, transpBMSB))
label.delete(maLabel21[1])

var label maLabel100 = na
maLabel100 := label.new(x=bar_index, y=int(ma4), yloc=yloc.price, style=label.style_label_left, color=color.new(color.blue, 100), text=tostring(ma4, "$ # - 1OOd sma"), textcolor=color.new(color.blue, transp100200))
label.delete(maLabel100[1])

var label maLabel200 = na
maLabel200 := label.new(x=bar_index, y=int(ma5), yloc=yloc.price, style=label.style_label_left, color=color.new(color.yellow, 100), text=tostring(ma5, "$ # - 2OOd sma"), textcolor=color.new(color.yellow, transp100200))
label.delete(maLabel200[1])


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//@version=4
//study(title="DIY: 20-50-100-200-300 SMA Daily", shorttitle="DIY: SMA Lines Weekly", overlay=true)

ma100d = security(syminfo.tickerid, "D", sma(close, 100), barmerge.gaps_on)
ma200d = security(syminfo.tickerid, "D", sma(close, 200), barmerge.gaps_on)
ma50 = security(syminfo.tickerid, "W", sma(close, 50), barmerge.gaps_on)
ma300 = security(syminfo.tickerid, "W", sma(close, 300), barmerge.gaps_on)
ma400 = security(syminfo.tickerid, "W", sma(close, 400), barmerge.gaps_on)
plot( ma100d, color=color.new(color.gray, transpDailyLines), title="dailyMMA100", linewidth=1)
plot( ma200d, color=color.new(color.gray, transpDailyLines), title="dailyMMA200", linewidth=1)
plot( ma50, color=color.new(color.black, transp100200), title="weeklyMMA50", linewidth=1)
plot( ma300, color=color.new(color.purple, transp100200), title="weeklyMMA300", linewidth=1)
plot( ma400, color=color.new(color.white, transp100200), title="weeklyMMA400", linewidth=1)

var label maLabel100d = na
maLabel100d := label.new(x=bar_index, y=int(ma100d), yloc=yloc.price, style=label.style_label_left, color=color.new(color.gray, 100), text=tostring(ma100d, "$ # - 1OO sma (daily)"), textcolor=color.new(color.gray, transpDailyLines))
label.delete(maLabel100d[1])

var label maLabel200d = na
maLabel200d := label.new(x=bar_index, y=int(ma200d), yloc=yloc.price, style=label.style_label_left, color=color.new(color.gray, 100), text=tostring(ma200d, "$ # - 2OO sma (daily)"), textcolor=color.new(color.gray, transpDailyLines))
label.delete(maLabel200d[1])

var label maLabel50 = na
maLabel50 := label.new(x=bar_index, y=int(ma50), yloc=yloc.price, style=label.style_label_left, color=color.new(color.black, 100), text=tostring(ma50, "$ # - 5Od sma"), textcolor=color.new(color.black, transp100200))
label.delete(maLabel50[1])

var label maLabel300 = na
maLabel300 := label.new(x=bar_index, y=int(ma300), yloc=yloc.price, style=label.style_label_left, color=color.new(color.purple, 100), text=tostring(ma300, "$ # - 3OOd sma"), textcolor=color.new(color.purple, transp100200))
label.delete(maLabel300[1])

var label maLabel400 = na
maLabel400 := label.new(x=bar_index, y=int(ma400), yloc=yloc.price, style=label.style_label_left, color=color.new(color.white, 100), text=tostring(ma400, "$ # - 4OOd sma"), textcolor=color.new(color.white, transp100200))
label.delete(maLabel400[1])


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
//study("DIY: The Cowen Corridor", overlay=true, resolution="W")

// Days X-Axis Value

start = time == timestamp(2010,7,18,0,0) // First BLX Bitcoin Date
days = security("BNC:BLX", "D", barssince(start))
c=sma(close, 20)

pi=3.1415926535
y1 = c*(16*pi*pi)/sqrt(days)
y2 = c/100*sqrt(days)

plot1 = plot(y1, color=color.new(color.red, showCowenCorridor))
plot2 = plot(y2, color=color.new(color.lime, showCowenCorridor))
fill(plot1,plot2,color=color.new(color.blue, fillCowenCorridor))


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//@version=4
//study(title="EMA Ribbon [Krypt]", shorttitle="EMA Ribbon", overlay=true)

dropn(src, n) =>
    na(src[n]) ? na : src

length1 = input(20, title="MA-1 period", minval=1)
length2 = input(25, title="MA-2 period", minval=1)
length3 = input(30, title="MA-3 period", minval=1)
length4 = input(35, title="MA-4 period", minval=1)
length5 = input(40, title="MA-5 period", minval=1)
length6 = input(45, title="MA-6 period", minval=1)
length7 = input(50, title="MA-7 period", minval=1)
length8 = input(55, title="MA-8 period", minval=1)
dropCandles = input(1, minval=0, title="Drop first N candles")

plot(ema(dropn(close, dropCandles), length1), title="MA-1", color=color.rgb(245, 235, 93, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length2), title="MA-2", color=color.rgb(245, 183, 113, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length3), title="MA-3", color=color.rgb(245, 176, 86, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length4), title="MA-4", color=color.rgb(245, 123, 78, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length5), title="MA-5", color=color.rgb(245, 109, 88, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length6), title="MA-6", color=color.rgb(245, 125, 81, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length7), title="MA-7", color=color.rgb(245, 81, 81, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length8), title="MA-8", color=color.rgb(170, 39, 7, transp=transpEMARibbon), linewidth=1)


// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=4
//study("Pi Cycle Bitcoin High/Low", shorttitle="Pi Cycle Bitcoin High/Low", overlay=true)

//Create Inputs for the 4 MAs, and Visual 

lowma_long = input(471, minval=1, title="BTC Low - Long SMA")
is_show_lowma1 = input(true, type=input.bool, title="Show Low Long SMA?")

lowema_short = input(150, minval=1, title="BTC Low - Short EMA")
is_show_lowma2 = input(true, type=input.bool, title="Show Low Short EMA?")

hima_long = input(350, minval=1, title="BTC High - Long SMA")
is_show_hima1 = input(true, type=input.bool, title="Show High Long SMA?")

hima_short = input(111, minval=1, title="BTC High - Short SMA")
is_show_hima2 = input(true, type=input.bool, title="Show High Short SMA?")

//Set resolution to the Daily Chart
resolution = input('D', type=input.string, title="Time interval")

//Run the math for the 4 MAs
ma_long_low = security(syminfo.tickerid, resolution, sma(close, lowma_long)*745, barmerge.gaps_on)/1000
ema_short_low = security(syminfo.tickerid, resolution, ema(close, lowema_short), barmerge.gaps_on)
ma_long_hi = security(syminfo.tickerid, resolution, sma(close, hima_long)*2, barmerge.gaps_on)
ma_short_hi = security(syminfo.tickerid, resolution, sma(close, hima_short), barmerge.gaps_on)

//Set SRC
src = security(syminfo.tickerid, resolution, close)

//Plot the 4 MAs
plot(is_show_lowma1?ma_long_low:na, color=color.new(color.red, transpTopBottem), linewidth=2, title="Low Long MA")
var lowma_long_label = label.new(x = bar_index, y = lowma_long, color = color.rgb(0, 0, 0, transpTopBottem), style = label.style_label_left, textcolor = color.new(color.red, transpTopBottem), text = "BTC Low - Long SMA")
label.set_xy(lowma_long_label, x = bar_index, y = ma_long_low)

plot(is_show_lowma2?ema_short_low:na, color=color.new(color.green, transpTopBottem), linewidth=2, title="Low Short EMA")
var lowema_short_label = label.new(x = bar_index, y = lowema_short, color = color.rgb(0, 0, 0, transpTopBottem), style = label.style_label_left, textcolor = color.new(color.green, transpTopBottem), text = "BTC Low - Short EMA")
label.set_xy(lowema_short_label, x = bar_index, y = ema_short_low)

plot(is_show_hima1?ma_long_hi:na, color=color.new(color.white, transpTopBottem), linewidth=2, title="High Long MA")
var hima_long_label = label.new(x = bar_index, y = hima_long, color = color.rgb(0, 0, 0, transpTopBottem), style = label.style_label_left, textcolor = color.new(color.white, transpTopBottem), text = "BTC High - Long MA")
label.set_xy(hima_long_label, x = bar_index, y = ma_long_hi)

plot(is_show_hima2?ma_short_hi:na, color=color.new(color.yellow, transpTopBottem), linewidth=2, title="High Short MA")
var hima_short_label = label.new(x = bar_index, y = hima_short, color = color.rgb(0, 0, 0, transpTopBottem), style = label.style_label_left, textcolor = color.new(color.yellow, transpTopBottem), text = "BTC High - Short MA")
label.set_xy(hima_short_label, x = bar_index, y = ma_short_hi)

//Find where the MAs cross each other
PiCycleLow = crossunder(ema_short_low, ma_long_low) ? src + (src/100 * 10) : na
PiCycleHi = crossunder(ma_long_hi, ma_short_hi) ? src + (src/100 * 10) : na

//Create vertical line
plot(PiCycleLow, color=color.new(color.white, transpTopBottem), linewidth=1, style = plot.style_histogram)
var ppch = plot(PiCycleHi, color=color.new(color.white, transpTopBottem), linewidth=1, style = plot.style_histogram)

//Create Labels
plotshape(PiCycleLow, text="Pi Cycle Low", color=color.new(color.navy, transpTopBottem), textcolor=color.new(color.white, transpTopBottem), style=shape.labelup, size=size.normal, location=location.belowbar, title="Cycle Low")
plotshape(PiCycleHi, text="Pi Cycle High", color=color.new(color.teal, transpTopBottem), textcolor=color.new(color.white, transpTopBottem), style=shape.labeldown, size=size.normal, location=location.abovebar, title="Cycle High")


//Generate vertical lines at the BTC Halving Dates
isDate(y, m, d) =>
    val = timestamp(y,m,d)
    if val <= time and val > time[1]
        true
    else 
        false

// First Halving
if isDate(2012, 11, 28)
    line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, style=line.style_dashed, color=color.yellow, width=1)
    label.new(bar_index, low, text="1st Halving - Nov 28, 2012", style=label.style_label_upper_left, textcolor=color.yellow, color=color.black, textalign=text.align_right, yloc=yloc.belowbar)
    
// Second Halving
if isDate(2016, 7, 9)
    line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, style=line.style_dashed, color=color.yellow, width=1)
    label.new(bar_index, low, text="2nd Halving - Jul 9, 2016", style=label.style_label_upper_left, textcolor=color.yellow, color=color.black, textalign=text.align_right, yloc=yloc.belowbar)
    
// Third Halving
if isDate(2020, 5, 11)
    line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, style=line.style_dashed, color=color.yellow, width=1)
    label.new(bar_index, low, text="3rd Halving - May 11, 2020", style=label.style_label_upper_left, textcolor=color.yellow, color=color.black, textalign=text.align_right, yloc=yloc.belowbar)    
         
// Fourth Halving
if isDate(2024, 4, 19)
    line.new(bar_index, low, bar_index, high, xloc.bar_index, extend.both, style=line.style_dashed, color=color.yellow, width=1)
    label.new(bar_index, low, text="4th Halving - April 2, 2024", style=label.style_label_upper_left, textcolor=color.yellow, color=color.black, textalign=text.align_right, yloc=yloc.belowbar)    


//@version = 4
//study("BTC Puell Multiple")

top1 = input(6.8, type=input.float, step = 0.05)
top2 = input(11.0, type=input.float, step = 0.05)
bottom = input(0.5, type=input.float, step = 0.05)
miningRevenue = security("QUANDL:BCHAIN/MIREV", "D", close[1], barmerge.gaps_off, barmerge.lookahead_on)
ma365 = security("QUANDL:BCHAIN/MIREV", "D", sma(close, 365)[1], barmerge.gaps_off, barmerge.lookahead_on)
puellMultiple = miningRevenue / ma365

//plot(puellMultiple, color=color.new(color.white, 0))
//hline(bottom, color=color.new(color.green, 0), linestyle=hline.style_solid, linewidth=1)
//hline(top1, color=color.new(color.red, 0), linestyle=hline.style_solid, linewidth=1)
//hline(top2, color=color.new(color.red, 0), linestyle=hline.style_solid, linewidth=2)

//bgcolor(puellMultiple < bottom ? color.new(color.green, 0) : puellMultiple > top1 ? color.new(color.red, 0) : na)
barcolor(puellMultiple < bottom ? color.new(color.white, 0) : puellMultiple > top1 ? color.new(color.yellow, 0) : na)

alertcondition(puellMultiple > top1, title="BTC Puell Multiple Top", message="BTC Puell Multiple Top Alert! - {{exchange}} : {{ticker}} Be careful, it's time to consider sell! \nCurrent price：{{close}} \nTriggered Time：{{timenow}}")
alertcondition(puellMultiple < bottom, title="BTC Puell Multiple Bottom", message="BTC Puell Multiple Bottom Alert! - {{exchange}} : {{ticker}} Congratulation! It's a good opportunity to accumulate more coins! \nCurrent price：{{close}} \nTriggered Time：{{timenow}}")
