//@version=4
study(title="DIY: BMSB, Risk, Corridor", shorttitle="DIY: BMSB(20MA/21EMA), Risk, Corridor", overlay=true)

// Amateur switch 8 week SMA
switch = input(title="On/Off 8 week SMA", type=input.bool, defval=true)
transp = 100
if (switch)
    transp := 0
    
// Amateur switch 100/200 week SMA
switch100200 = input(title="On/Off 100/200 week SMA", type=input.bool, defval=true)
transp100200 = 100
fill100200 = 100
if (switch100200)
    transp100200 := 0
    fill100200 := 80
    
// Amateur switch show Ben's Risk
switchCowenCorridor = input(title="On/Off Cowen Corridor", type=input.bool, defval=true)
showCowenCorridor = 100
fillCowenCorridor = 100
if (switchCowenCorridor and timeframe.isweekly)
    showCowenCorridor := 0
    fillCowenCorridor := 90    

// Amateur switch EMA Ribbon
switchEMARibbon = input(title="On/Off EMA Ribbon", type=input.bool, defval=false)
transpEMARibbon = 100
if (switchEMARibbon)
    transpEMARibbon := 0
    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MA

ma1Enabled = input(title="MA 1", type=input.bool, defval=true, group="Moving Average", inline="MA1")
ma1Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA1")
ma1Length = input(title="", type=input.integer, defval=8, minval=1, group="Moving Average", inline="MA1")
ma1Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA11")
ma1Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA11")
ma1Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA11")

ma2Enabled = input(title="MA 2", type=input.bool, defval=true, group="Moving Average", inline="MA2")
ma2Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA2")
ma2Length = input(title="", type=input.integer, defval=20, minval=1, group="Moving Average", inline="MA2")
ma2Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA22")
ma2Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA22")
ma2Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA22")

ma3Enabled = input(title="MA 3", type=input.bool, defval=true, group="Moving Average", inline="MA3")
ma3Type = input("EMA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA3")
ma3Length = input(title="", type=input.integer, defval=21, minval=1, group="Moving Average", inline="MA3")
ma3Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA33")
ma3Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA33")
ma3Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA33")

ma4Enabled = input(title="MA 4", type=input.bool, defval=true, group="Moving Average", inline="MA4")
ma4Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA4")
ma4Length = input(title="", type=input.integer, defval=100, minval=1, group="Moving Average", inline="MA4")
ma4Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA44")
ma4Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA44")
ma4Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA44")

ma5Enabled = input(title="MA 5", type=input.bool, defval=true, group="Moving Average", inline="MA5")
ma5Type = input("MA", title="", options = ["EMA", "MA"], group="Moving Average", inline="MA5")
ma5Length = input(title="", type=input.integer, defval=200, minval=1, group="Moving Average", inline="MA5")
ma5Resolution = input(title="", type=input.resolution, defval="", group="Moving Average", inline="MA55")
ma5Source = input(title="", type=input.source, defval=close, group="Moving Average", inline="MA55")
ma5Forecast = input(title=" Forecast", type=input.bool, defval=true, group="Moving Average", inline="MA55")

ma(_type, _src, _len) =>
    if _type == "EMA"
        ema(_src, _len)
    else if _type == "MA"
        sma(_src, _len)

ma_prediction(_type, _src, _period, _offset) =>
    (ma(_type, _src, _period - _offset) * (_period - _offset) + _src * _offset) / _period

ma1 = security(syminfo.tickerid, "W", ma(ma1Type, ma1Source, ma1Length), barmerge.gaps_on, barmerge.lookahead_on)
ma2 = security(syminfo.tickerid, "W", ma(ma2Type, ma2Source, ma2Length), barmerge.gaps_on, barmerge.lookahead_on)
ma3 = security(syminfo.tickerid, "W", ma(ma3Type, ma3Source, ma3Length), barmerge.gaps_on, barmerge.lookahead_on)
ma4 = security(syminfo.tickerid, "W", ma(ma4Type, ma4Source, ma4Length), barmerge.gaps_on, barmerge.lookahead_on)
ma5 = security(syminfo.tickerid, "W", ma(ma5Type, ma5Source, ma5Length), barmerge.gaps_on, barmerge.lookahead_on)

pma1_1 = security(syminfo.tickerid, "W", ma_prediction(ma1Type, ma1Source, ma1Length, 1))
pma1_2 = security(syminfo.tickerid, "W", ma_prediction(ma1Type, ma1Source, ma1Length, 2))
pma1_3 = security(syminfo.tickerid, "W", ma_prediction(ma1Type, ma1Source, ma1Length, 3))
pma1_4 = security(syminfo.tickerid, "W", ma_prediction(ma1Type, ma1Source, ma1Length, 4))
pma1_5 = security(syminfo.tickerid, "W", ma_prediction(ma1Type, ma1Source, ma1Length, 5))

pma2_1 = security(syminfo.tickerid, "W", ma_prediction(ma2Type, ma2Source, ma2Length, 1))
pma2_2 = security(syminfo.tickerid, "W", ma_prediction(ma2Type, ma2Source, ma2Length, 2))
pma2_3 = security(syminfo.tickerid, "W", ma_prediction(ma2Type, ma2Source, ma2Length, 3))
pma2_4 = security(syminfo.tickerid, "W", ma_prediction(ma2Type, ma2Source, ma2Length, 4))
pma2_5 = security(syminfo.tickerid, "W", ma_prediction(ma2Type, ma2Source, ma2Length, 5))

pma3_1 = security(syminfo.tickerid, "W", ma_prediction(ma3Type, ma3Source, ma3Length, 1))
pma3_2 = security(syminfo.tickerid, "W", ma_prediction(ma3Type, ma3Source, ma3Length, 2))
pma3_3 = security(syminfo.tickerid, "W", ma_prediction(ma3Type, ma3Source, ma3Length, 3))
pma3_4 = security(syminfo.tickerid, "W", ma_prediction(ma3Type, ma3Source, ma3Length, 4))
pma3_5 = security(syminfo.tickerid, "W", ma_prediction(ma3Type, ma3Source, ma3Length, 5))

pma4_1 = security(syminfo.tickerid, "W", ma_prediction(ma4Type, ma4Source, ma4Length, 1))
pma4_2 = security(syminfo.tickerid, "W", ma_prediction(ma4Type, ma4Source, ma4Length, 2))
pma4_3 = security(syminfo.tickerid, "W", ma_prediction(ma4Type, ma4Source, ma4Length, 3))
pma4_4 = security(syminfo.tickerid, "W", ma_prediction(ma4Type, ma4Source, ma4Length, 4))
pma4_5 = security(syminfo.tickerid, "W", ma_prediction(ma4Type, ma4Source, ma4Length, 5))

pma5_1 = security(syminfo.tickerid, "W", ma_prediction(ma5Type, ma5Source, ma5Length, 1))
pma5_2 = security(syminfo.tickerid, "W", ma_prediction(ma5Type, ma5Source, ma5Length, 2))
pma5_3 = security(syminfo.tickerid, "W", ma_prediction(ma5Type, ma5Source, ma5Length, 3))
pma5_4 = security(syminfo.tickerid, "W", ma_prediction(ma5Type, ma5Source, ma5Length, 4))
pma5_5 = security(syminfo.tickerid, "W", ma_prediction(ma5Type, ma5Source, ma5Length, 5))

plot(ma1Enabled ? ma1 : na, title="MA 1", color=color.new(color.orange, transp), linewidth=2)
p4 = plot(ma4Enabled ? ma4 : na, title="MA 4", color=color.new(color.blue, transp100200), linewidth=2)
p5 = plot(ma4Enabled ? ma5 : na, title="MA 5", color=color.new(color.yellow, transp100200), linewidth=2)
p1 = plot(ma2Enabled ? ma2 : na, title="MA 2", color=color.new(color.red, 0), linewidth=2)
p2 = plot(ma3Enabled ? ma3 : na, title="MA 3", color=color.new(color.green, 0), linewidth=2)
fill(p1, p2, color=color.rgb(255,255,0, 80))
//fill(p4, p5, color=color.rgb(255,255,0, fill100200))

var label maLabel8 = na
maLabel8 := label.new(x=bar_index, y=int(ma1), yloc=yloc.price, style=label.style_label_left, color=color.new(color.orange, 100), text=tostring(ma1, "$ # - 8d sma"), textcolor=color.new(color.orange, transp))
label.delete(maLabel8[1])

var label maLabel20 = na
maLabel20 := label.new(x=bar_index, y=int(ma2), yloc=yloc.price, style=label.style_label_left, color=color.new(color.red, 100), text=tostring(ma2, "$ # - 2Od sma"), textcolor=color.new(color.red, 0))
label.delete(maLabel20[1])

var label maLabel21 = na
maLabel21 := label.new(x=bar_index, y=int(ma3), yloc=yloc.price, style=label.style_label_left, color=color.new(color.green, 100), text=tostring(ma3, "$ # - 21d ema"), textcolor=color.new(color.green, 0))
label.delete(maLabel21[1])

var label maLabel100 = na
maLabel100 := label.new(x=bar_index, y=int(ma4), yloc=yloc.price, style=label.style_label_left, color=color.new(color.blue, 100), text=tostring(ma4, "$ # - 1OOd sma"), textcolor=color.new(color.blue, transp100200))
label.delete(maLabel100[1])

var label maLabel200 = na
maLabel200 := label.new(x=bar_index, y=int(ma5), yloc=yloc.price, style=label.style_label_left, color=color.new(color.yellow, 100), text=tostring(ma5, "$ # - 2OOd sma"), textcolor=color.new(color.yellow, transp100200))
label.delete(maLabel200[1])


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//@version=4
//study(title="DIY: 20-50-100-200-300 SMA Daily", shorttitle="DIY: SMA Lines Weekly", overlay=true)

ma100d = security(syminfo.tickerid, "D", sma(close, 100), barmerge.gaps_on)
ma200d = security(syminfo.tickerid, "D", sma(close, 200), barmerge.gaps_on)
ma200dtop = security(syminfo.tickerid, "D", sma(close, 200), barmerge.gaps_on)*2.4
ma50 = security(syminfo.tickerid, "W", sma(close, 50), barmerge.gaps_on)
ma300 = security(syminfo.tickerid, "W", sma(close, 300), barmerge.gaps_on)
plot( ma100d, color=color.new(color.gray, 10), title="dailyMMA100", linewidth=3)
plot( ma200d, color=color.new(color.gray, 10), title="dailyMMA200", linewidth=3)
plot( ma200dtop, color=color.new(color.red, 10), title="dailyMMA200top", linewidth=1)
plot( ma50, color=color.new(color.white, 10), title="weeklyMMA50", linewidth=3)
plot( ma300, color=color.new(color.purple, 10), title="weeklyMMA300", linewidth=3)

var label maLabel100d = na
maLabel100d := label.new(x=bar_index, y=int(ma100d), yloc=yloc.price, style=label.style_label_left, color=color.new(color.gray, 100), text=tostring(ma100d, "$ # - 1OO sma (daily)"), textcolor=color.new(color.gray, transp100200))
label.delete(maLabel100d[1])

var label maLabel200d = na
maLabel200d := label.new(x=bar_index, y=int(ma200d), yloc=yloc.price, style=label.style_label_left, color=color.new(color.gray, 100), text=tostring(ma200d, "$ # - 2OO sma (daily)"), textcolor=color.new(color.gray, transp100200))
label.delete(maLabel200d[1])

var label maLabel200dtop = na
maLabel200dtop := label.new(x=bar_index, y=int(ma200dtop), yloc=yloc.price, style=label.style_label_left, color=color.new(color.red, 100), text=tostring(ma200dtop, "$ # - 2OO*2/4 sma (daily)"), textcolor=color.new(color.red, transp100200))
label.delete(maLabel200dtop[1])

var label maLabel50 = na
maLabel50 := label.new(x=bar_index, y=int(ma50), yloc=yloc.price, style=label.style_label_left, color=color.new(color.white, 100), text=tostring(ma50, "$ # - 5Od sma"), textcolor=color.new(color.white, transp100200))
label.delete(maLabel50[1])

var label maLabel300 = na
maLabel300 := label.new(x=bar_index, y=int(ma300), yloc=yloc.price, style=label.style_label_left, color=color.new(color.purple, 100), text=tostring(ma300, "$ # - 3OOd sma"), textcolor=color.new(color.purple, transp100200))
label.delete(maLabel300[1])


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
//study("DIY: The Cowen Corridor", overlay=true, resolution="W")

// Days X-Axis Value

start = time == timestamp(2010,7,18,0,0) // First BLX Bitcoin Date
days = security("BNC:BLX", "D", barssince(start))
c=sma(close, 20)

pi=3.1415926535
y1 = c*(16*pi*pi)/sqrt(days)
y2 = c/100*sqrt(days)

plot1 = plot(y1, color=color.new(color.red, showCowenCorridor))
plot2 = plot(y2, color=color.new(color.lime, showCowenCorridor))
fill(plot1,plot2,color=color.new(color.blue, fillCowenCorridor))


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//@version=4
//study(title="EMA Ribbon [Krypt]", shorttitle="EMA Ribbon", overlay=true)

dropn(src, n) =>
    na(src[n]) ? na : src

length1 = input(20, title="MA-1 period", minval=1)
length2 = input(25, title="MA-2 period", minval=1)
length3 = input(30, title="MA-3 period", minval=1)
length4 = input(35, title="MA-4 period", minval=1)
length5 = input(40, title="MA-5 period", minval=1)
length6 = input(45, title="MA-6 period", minval=1)
length7 = input(50, title="MA-7 period", minval=1)
length8 = input(55, title="MA-8 period", minval=1)
dropCandles = input(1, minval=0, title="Drop first N candles")

plot(ema(dropn(close, dropCandles), length1), title="MA-1", color=color.rgb(245, 235, 93, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length2), title="MA-2", color=color.rgb(245, 183, 113, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length3), title="MA-3", color=color.rgb(245, 176, 86, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length4), title="MA-4", color=color.rgb(245, 123, 78, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length5), title="MA-5", color=color.rgb(245, 109, 88, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length6), title="MA-6", color=color.rgb(245, 125, 81, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length7), title="MA-7", color=color.rgb(245, 81, 81, transp=transpEMARibbon), linewidth=1)
plot(ema(dropn(close, dropCandles), length8), title="MA-8", color=color.rgb(170, 39, 7, transp=transpEMARibbon), linewidth=1)


// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=4
//study("DIY: Ben's Risk", overlay=true)

// Amateur switch show Ben's Risk
switchShowRisk = input(title="On/Off Ben's Risk", type=input.bool, defval=true)
showRisk = 100
if (switchShowRisk)
    showRisk := 0

input = input(title="Ticker", defval="BTC", options=["BTC", "ETH", "ADA", "DOT", "LINK", "TMC"])
price01 = if (input == "BTC")
    18453.9521392313
else
    if (input == "ETH")
        643.894503469523
    else
        if (input == "ADA")
            0.293654632758314
        else
            if (input == "DOT")
                16.0544101454228
            else
                if (input == "LINK")
                    11.5336842938569
                else
                    if (input == "TMC")
                        741532809295.967

price02 = if (input == "BTC")
    23987.423618019
else
    if (input == "ETH")
        1159.17928965594
    else
        if (input == "ADA")
            0.722778350515464
        else
            if (input == "DOT")
                18.6255841343414
            else
                if (input == "LINK")
                    13.9085529293
                else
                    if (input == "TMC")
                        994228758169.935

price03 = if (input == "BTC")
    32836.8816530996
else
    if (input == "ETH")
        2263.68903557022
    else
        if (input == "ADA")
            1.63572994614175
        else
            if (input == "DOT")
                24.0756760739813
            else
                if (input == "LINK")
                    19.2589610204518
                else
                    if (input == "TMC")
                        994228758169.935

price04 = if (input == "BTC")
    44883.9673913044
else
    if (input == "ETH")
        4096.31620199306
    else
        if (input == "ADA")
            3.15012164553229
        else
            if (input == "DOT")
                33.129710388013
            else
                if (input == "LINK")
                    28.1144578313253
                else
                    if (input == "TMC")
                        1398962098044.67

price05 = if (input == "BTC")
    60052.5608732158
else
    if (input == "ETH")
        6776.45407765477
    else
        if (input == "ADA")
            5.37232431868017
        else
            if (input == "DOT")
                46.3464762496119
            else
                if (input == "LINK")
                    41.0493732803424
                else
                    if (input == "TMC")
                        1951235646530.2

price06 = if (input == "BTC")
    78284.8664688427
else
    if (input == "ETH")
        10418.3329219123
    else
        if (input == "ADA")
            8.40209717607973
        else
            if (input == "DOT")
                64.2508703665779
            else
                if (input == "LINK")
                    58.5811863391252
                else
                    if (input == "TMC")
                        2647135176651.31

price07 = if (input == "BTC")
    99532.9695316053
else
    if (input == "ETH")
        15129.7259983008
    else
        if (input == "ADA")
            12.3420024853542
        else
            if (input == "DOT")
                87.3429976702045
            else
                if (input == "LINK")
                    81.1990352881442
                else
                    if (input == "TMC")
                        3485387673956.26

price08 = if (input == "BTC")
    123758.408215661
else
    if (input == "ETH")
        21022.5302154493
    else
        if (input == "ADA")
            17.3020558487247
        else
            if (input == "DOT")
                116.107609041706
            else
                if (input == "LINK")
                    109.38859457775
                else
                    if (input == "TMC")
                        4465133095787.05

price09 = if (input == "BTC")
    150927.958833619
else
    if (input == "ETH")
        28215.7620700537
    else
        if (input == "ADA")
            23.4004143831039
        else
            if (input == "DOT")
                151.030986993114
            else
                if (input == "LINK")
                    143.634493078938
                else
                    if (input == "TMC")
                        5585383794044.37

price10 = if (input == "BTC")
    173220.234423196
else
    if (input == "ETH")
        34536.9066955423
    else
        if (input == "ADA")
            28.8037116895118
        else
            if (input == "DOT")
                181.562337662338
            else
                if (input == "LINK")
                    173.592183517417
                else
                    if (input == "TMC")
                        6846185594461.46

bepPrice = if (input == "BTC")
    26605
else
    if (input == "ETH")
        1392
    else
        if (input == "ADA")
            0.57
        else
            if (input == "DOT")
                22.94
            else
                if (input == "LINK")
                    22.63

var labelText01 = "0.1"  + tostring(price01, " - $ #.##")
plot(price01, title='Line', color=color.new(color.green, showRisk), linewidth=1)
var label01 = label.new(bar_index, price01, text=labelText01)
label.set_x(label01, 0)
label.set_color(label01, color.new(color.green, showRisk))
label.set_xloc(label01, time, xloc.bar_time)
label.set_style(label01, label.style_label_left)

var labelText02 = "0.2"  + tostring(price02, " - $ #.##")
plot(price02, title='Line', color=color.new(color.green, showRisk), linewidth=1)
var label02 = label.new(bar_index, price02, text=labelText02)
label.set_x(label02, 0)
label.set_color(label02, color.new(color.green, showRisk))
label.set_xloc(label02, time, xloc.bar_time)
label.set_style(label02, label.style_label_left)

var labelText03 = "0.3"  + tostring(price03, " - $ #.##")
plot(price03, title='Line', color=color.new(color.green, showRisk), linewidth=1)
var label03 = label.new(bar_index, price03, text=labelText03)
label.set_x(label03, 0)
label.set_color(label03, color.new(color.green, showRisk))
label.set_xloc(label03, time, xloc.bar_time)
label.set_style(label03, label.style_label_left)

var labelText04 = "0.4"  + tostring(price04, " - $ #.##")
plot(price04, title='Line', color=color.new(color.green, showRisk), linewidth=1)
var label04 = label.new(bar_index, price04, text=labelText04)
label.set_x(label04, 0)
label.set_color(label04, color.new(color.green, showRisk))
label.set_xloc(label04, time, xloc.bar_time)
label.set_style(label04, label.style_label_left)

var labelText05 = "0.5"  + tostring(price05, " - $ #.##")
plot(price05, title='Line', color=color.new(color.green, showRisk), linewidth=1)
var label05 = label.new(bar_index, price05, text=labelText05)
label.set_x(label05, 0)
label.set_color(label05, color.new(color.green, showRisk))
label.set_xloc(label05, time, xloc.bar_time)
label.set_style(label05, label.style_label_left)

var labelText06 = "0.6"  + tostring(price06, " - $ #.##")
plot(price06, title='Line', color=color.new(color.orange, showRisk), linewidth=1)
var label06 = label.new(bar_index, price06, text=labelText06)
label.set_x(label06, 0)
label.set_color(label06, color.new(color.orange, showRisk))
label.set_xloc(label06, time, xloc.bar_time)
label.set_style(label06, label.style_label_left)

var labelText07 = "0.7"  + tostring(price07, " - $ #.##")
plot(price07, title='Line', color=color.new(color.orange, showRisk), linewidth=1)
var label07 = label.new(bar_index, price07, text=labelText07)
label.set_x(label07, 0)
label.set_color(label07, color.new(color.orange, showRisk))
label.set_xloc(label07, time, xloc.bar_time)
label.set_style(label07, label.style_label_left)

var labelText08 = "0.8"  + tostring(price08, " - $ #.##")
plot(price08, title='Line', color=color.new(color.red, showRisk), linewidth=1)
var label08 = label.new(bar_index, price08, text=labelText08)
label.set_x(label08, 0)
label.set_color(label08, color.new(color.red, showRisk))
label.set_xloc(label08, time, xloc.bar_time)
label.set_style(label08, label.style_label_left)

var labelText09 = "0.9"  + tostring(price09, " - $ #.##")
plot(price09, title='Line', color=color.new(color.red, showRisk), linewidth=1)
var label09 = label.new(bar_index, price09, text=labelText09)
label.set_x(label09, 0)
label.set_color(label09, color.new(color.red, showRisk))
label.set_xloc(label09, time, xloc.bar_time)
label.set_style(label09, label.style_label_left)

var labelText10 = "1.0" + tostring(price10, " - $ #.##")
plot(price10, title='Line', color=color.new(color.red, showRisk), linewidth=1)
var label10 = label.new(bar_index, price10, text=labelText10)
label.set_x(label10, 0)
label.set_color(label10, color.new(color.red, showRisk))
label.set_xloc(label10, time, xloc.bar_time)
label.set_style(label10, label.style_label_left)

var bepText = "" + tostring(bepPrice, "$ #.##")
plot(bepPrice, title='Line', color=color.new(color.orange, 0), linewidth=2)
var bepLabel = label.new(bar_index, bepPrice, text=bepText)
label.set_x(bepLabel, 0)
label.set_color(bepLabel, color.new(color.orange, 20))
label.set_xloc(bepLabel, time, xloc.bar_time)
label.set_style(bepLabel, label.style_label_left)
